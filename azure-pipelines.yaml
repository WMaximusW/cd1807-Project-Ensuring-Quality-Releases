name: TrungNQ72-Pipeline-$(Date:yyyyMMddHHmmss)$(Rev:.r)

trigger:
- main

pool: TrungNQ72-Udacity-Project3-SelfHost

variables:
  - group: MyTerraformVars  # Reference your variable group here

stages:
  - stage: Infrastructure
    jobs:
      - job: Terraform
        steps:
          # Install Terraform on the pipeline agent 
          - task: TerraformInstaller@0
            displayName: 'Terraform installation'
            inputs:
              terraformVersion: '1.2.9'
          
          # Run Terraform Init
          - task: TerraformTaskV3@3
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              backendServiceArm: '$(azureServiceConnectionId)'
              backendAzureRmResourceGroupName: '$(resource_group_name)'
              backendAzureRmStorageAccountName: '$(storageAccountName)'
              backendAzureRmContainerName: '$(containerName)'
              backendAzureRmKey: 'test.terraform.tfstate'
              commandOptions: '-input=false -backend-config="client_id=$(client_id)" -backend-config="client_secret=$(client_secret)" -backend-config="tenant_id=$(tenant_id)" -backend-config="subscription_id=$(subscription_id)"'
          
           # Run Terraform Validate    
          - task: TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: 'azurerm'
              command: 'validate'

          # Run Terraform Apply
          - task: TerraformTaskV3@3
            displayName: 'Terraform apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
              commandOptions: '-input=false -auto-approve -var="tenant_id=$(tenant_id)" -var="subscription_id=$(subscription_id)" -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="public_key=$(public_key)"'
          
  - stage: Build
    dependsOn: Infrastructure
    jobs:
      - job: Archive fakerestapi web package
        steps:
      # Archive the web package
          - task: ArchiveFiles@2
            displayName: 'Archive fakerestapi web package'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_webapp.zip'
              replaceExistingArchive: true

          # Publish the archived package as an artifact
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: webapp'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_webapp.zip'
              ArtifactName: '$(Build.BuildId)-webapp'
      
      - job: Archive Selenium Test Suite
        steps:
          # Archive the Selenium Test Suite
          - task: ArchiveFiles@2
            displayName: 'Archive Selenium Test Suite'
            inputs:
              rootFolderOrFile: 'automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_selenium.zip'
              replaceExistingArchive: true
          
           # Publish the Selenium Test Suite as a build artifact
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Selenium Test Suite Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_selenium.zip'
              ArtifactName: '$(Build.BuildId)-selenium'

  - stage: Deploy
    dependsOn: Build
    jobs:
      - job: DeployWebAppToAzure
        steps:
          # Download the published artifact
          - task: DownloadPipelineArtifact@2
            displayName: 'Download webapp artifact'
            inputs:
              artifact: '$(Build.BuildId)_webapp'

          # Deploy the archived package to Azure Web App
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appType: 'webApp'
              appName: 'trungnq72-project3-AppService'
              package: '$(Pipeline.Workspace)/$(Build.BuildId)_webapp.zip'
              deployToSlotOrASE: false   

      - job: DeploySeleniumToVM
        steps:
          # Download the artifact
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Selenium Test Suite Artifact' 
            inputs:
              artifact: '$(Build.BuildId)_selenium'

          # Copy the Selenium Test Suite to the VM
          - task: CopyFilesOverSSH@0
            displayName: 'Upload Selenium Test Suite to VM'
            inputs:
              sshEndpoint: '$(sshEndpoint)'
              sourceFolder: '$(Pipeline.Workspace)'
              contents: '$(Build.BuildId)_selenium.zip'
              targetFolder: '/home/azureuser/'
          
  - stage: Test
    dependsOn: Deploy
    jobs:
      - job: RunSeleniumTests
        steps:
          # SSH into the VM and run the Selenium Test Suite
          - task: SSH@0
            displayName: 'Run Selenium Test Suite on VM'
            inputs:
              sshEndpoint: '$(sshEndpoint)'
              runOptions: 'inline'
              inline: |
                sudo apt-get update
                sudo DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
                sudo add-apt-repository -y universe
                sudo apt-get update
                sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-pip unzip chromium-browser
                mkdir -p /home/azureuser/selenium_tests
                unzip -o /home/azureuser/selenium_tests.zip -d /home/azureuser/selenium_tests
                cd /home/azureuser/selenium_tests
                python3 -m pip install --upgrade pip
                python3 -m pip install -r requirements.txt
                export PATH="$PATH:/usr/bin"
                python3 login.py > selenium_test_output.log

      - job: RunPostmanTests
        steps:
          - checkout: self
            clean: true

          - script: |
              npm install -g newman
            displayName: 'Install Newman'

          - task: CmdLine@2
            displayName: 'Run Postman Regression Test Suite'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              script: |
                newman run "RegressionTestSuite.json" -r cli,junit --reporter-junit-export="$(Build.ArtifactStagingDirectory)/postman_test_regression_results.xml"

          - task: CmdLine@2
            displayName: 'Run Postman Regression Test Suite'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              script: |
                newman run "DataValidationTestSuite.json" -r cli,junit --reporter-junit-export="$(Build.ArtifactStagingDirectory)/postman_test_data_validation_results.xml"

          - task: PublishTestResults@2
            displayName: 'Publish Postman Regression Test Results'
            inputs:
              testResultsFiles: '$(Build.ArtifactStagingDirectory)/postman_test_regression_results.xml'
              testRunTitle: 'Postman Regression Test Results'

          - task: PublishTestResults@2
            displayName: 'Publish Postman Data Validation Test Results'
            inputs:
              testResultsFiles: '$(Build.ArtifactStagingDirectory)/postman_test_data_validation_results.xml'
              testRunTitle: 'Postman Regression Test Results'